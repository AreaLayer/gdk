diff --git -ru a/src/cbor-lite.hpp b/src/cbor-lite.hpp
--- a/src/cbor-lite.hpp	2021-01-20 00:19:17.000000000 +0100
+++ b/src/cbor-lite.hpp	2023-12-12 15:49:34.523285843 +0100
@@ -8,6 +8,7 @@
 // COPYRIGHT.md file in the top-level folder of the CBOR-lite software
 // distribution.
 
+#include <cstdint>
 #include <exception>
 #include <iterator>
 #include <string>
diff --git -ru a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in	2021-01-20 00:19:17.000000000 +0100
+++ b/src/Makefile.in	2023-12-12 15:48:42.308731733 +0100
@@ -28,8 +28,8 @@
 RESET=`tput sgr0`
 
 COMPILER = g++
-CFLAGS += --debug -O0
-CXXFLAGS += -std=c++17 -stdlib=libc++ --debug -O0
+CFLAGS +=
+CXXFLAGS += -std=c++17
 
 ARFLAGS = rcs
 
diff --git -ru a/src/memzero.c b/src/memzero.c
--- a/src/memzero.c	2021-01-20 00:19:17.000000000 +0100
+++ b/src/memzero.c	2023-12-12 15:47:38.457606865 +0100
@@ -6,7 +6,7 @@
 #include <string.h>
 
 #ifdef _WIN32
-#include <Windows.h>
+#include <windows.h>
 #endif
 
 #ifdef __unix__
diff --git -ru a/src/xoshiro256.cpp b/src/xoshiro256.cpp
--- a/src/xoshiro256.cpp	2021-01-20 00:19:17.000000000 +0100
+++ b/src/xoshiro256.cpp	2023-12-12 15:47:18.376623718 +0100
@@ -7,6 +7,7 @@
 
 #include "xoshiro256.hpp"
 #include <limits>
+#include <cstring>
 
 /*  Written in 2018 by David Blackman and Sebastiano Vigna (vigna@acm.org)
 
diff --git a/src/utils.hpp b/src/utils.hpp
--- a/src/utils.hpp
+++ b/src/utils.hpp
@@ -60,11 +60,8 @@ std::vector<T> join(const std::vector<std::vector<T>>& parts) {
 template<typename T>
 std::pair<std::vector<T>, std::vector<T>> split(const std::vector<T>& buf, size_t count) {
     auto first = buf.begin();
-    auto c = std::min(buf.size(), count);
-    auto last = first + c;
-    auto a = std::vector(first, last);
-    auto b = std::vector(last, buf.end());
-    return std::make_pair(a, b);
+    auto last = first + std::min(buf.size(), count);
+    return { {first, last}, {last, buf.end()} };
 }
 
 template<typename T>
@@ -72,7 +69,7 @@ std::vector<T> take_first(const std::vector<T> &buf, size_t count) {
     auto first = buf.begin();
     auto c = std::min(buf.size(), count);
     auto last = first + c;
-    return std::vector(first, last);
+    return {first, last};
 }
 
 void xor_into(ByteVector& target, const ByteVector& source);
